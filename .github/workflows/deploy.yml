name: Deploy GovHub Documentation

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build and validation job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mkdocs-material[recommended,imaging]

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Validate MkDocs configuration
        run: |
          echo "🔍 Validating MkDocs configuration..."
          mkdocs build --strict --verbose

      - name: Check for orphaned files
        run: |
          echo "🔍 Checking for orphaned documentation files..."
          find docs -name "*.md" -type f > /tmp/all_md_files.txt
          
          python -c "
          import yaml
          import re
          
          with open('mkdocs.yml', 'r', encoding='utf-8') as f:
              config = yaml.safe_load(f)
          
          referenced_files = set()
          
          def extract_files(nav_item):
              if isinstance(nav_item, dict):
                  for key, value in nav_item.items():
                      if isinstance(value, str) and value.endswith('.md'):
                          referenced_files.add('docs/' + value)
                      elif isinstance(value, list):
                          for item in value:
                              extract_files(item)
                      elif isinstance(value, dict):
                          extract_files(value)
              elif isinstance(nav_item, list):
                  for item in nav_item:
                      extract_files(item)
          
          if 'nav' in config:
              extract_files(config['nav'])
          
          with open('/tmp/referenced_files.txt', 'w') as f:
              for file in sorted(referenced_files):
                  f.write(file + '\n')
          "
          
          comm -23 <(sort /tmp/all_md_files.txt) <(sort /tmp/referenced_files.txt) > /tmp/orphaned_files.txt
          
          if [ -s /tmp/orphaned_files.txt ]; then
            echo "⚠️ Found orphaned documentation files:"
            cat /tmp/orphaned_files.txt
            echo "::warning::Orphaned documentation files found. Consider adding them to navigation or removing them."
          else
            echo "✅ No orphaned files found"
          fi

      - name: Build MkDocs site
        env:
          GOOGLE_ANALYTICS_KEY: ${{ secrets.GOOGLE_ANALYTICS_KEY }}
        run: |
          echo "🏗️ Building MkDocs site..."
          mkdocs build --verbose

      - name: Generate build report
        run: |
          echo "📊 Generating build report..."
          total_md_files=$(find docs -name "*.md" -type f | wc -l)
          total_images=$(find docs -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.svg" | wc -l)
          word_count=$(find docs -name "*.md" -type f -exec cat {} \; | wc -w)
          
          echo "## 📈 Build Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Markdown files:** $total_md_files" >> $GITHUB_STEP_SUMMARY
          echo "- **Total images:** $total_images" >> $GITHUB_STEP_SUMMARY
          echo "- **Approximate word count:** $word_count" >> $GITHUB_STEP_SUMMARY
          echo "- **Build time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Blog posts:** $(find docs/blog/posts -name "*.md" -type f | wc -l)" >> $GITHUB_STEP_SUMMARY

      - name: Setup Pages
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: actions/configure-pages@v4

      - name: Upload artifact
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

      - name: Comment PR with validation results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            let comment = '## 📚 GovHub Documentation Build Results\n\n';
            comment += '✅ MkDocs configuration validated\n';
            comment += '✅ Documentation structure checked\n';
            comment += '✅ Blog integration verified\n';
            comment += '✅ Build completed successfully\n\n';
            comment += 'The documentation site is ready for deployment! 🚀';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Deployment job
  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Post deployment notification
        run: |
          echo "🚀 GovHub Documentation deployed successfully!"
          echo "📖 Site URL: ${{ steps.deployment.outputs.page_url }}"
