name: Documentation Validation

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  validate-docs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mkdocs-material[recommended,imaging]
          pip install linkchecker

      - name: Validate MkDocs configuration
        run: |
          echo "🔍 Validating MkDocs configuration..."
          mkdocs build --strict --verbose

      - name: Check for orphaned files
        run: |
          echo "🔍 Checking for orphaned documentation files..."
          # Find all markdown files
          find docs -name "*.md" -type f > /tmp/all_md_files.txt
          
          # Extract files referenced in mkdocs.yml
          python -c "
          import yaml
          import re
          
          with open('mkdocs.yml', 'r', encoding='utf-8') as f:
              config = yaml.safe_load(f)
          
          referenced_files = set()
          
          def extract_files(nav_item):
              if isinstance(nav_item, dict):
                  for key, value in nav_item.items():
                      if isinstance(value, str) and value.endswith('.md'):
                          referenced_files.add('docs/' + value)
                      elif isinstance(value, list):
                          for item in value:
                              extract_files(item)
                      elif isinstance(value, dict):
                          extract_files(value)
              elif isinstance(nav_item, list):
                  for item in nav_item:
                      extract_files(item)
          
          if 'nav' in config:
              extract_files(config['nav'])
          
          with open('/tmp/referenced_files.txt', 'w') as f:
              for file in sorted(referenced_files):
                  f.write(file + '\n')
          "
          
          # Find orphaned files
          comm -23 <(sort /tmp/all_md_files.txt) <(sort /tmp/referenced_files.txt) > /tmp/orphaned_files.txt
          
          if [ -s /tmp/orphaned_files.txt ]; then
            echo "⚠️ Found orphaned documentation files:"
            cat /tmp/orphaned_files.txt
            echo "::warning::Orphaned documentation files found. Consider adding them to navigation or removing them."
          else
            echo "✅ No orphaned files found"
          fi

      - name: Check for broken internal links
        run: |
          echo "🔍 Checking for broken internal links..."
          mkdocs serve --dev-addr=127.0.0.1:8000 &
          SERVER_PID=$!
          sleep 10
          
          # Check if server is running
          if curl -f http://127.0.0.1:8000 > /dev/null 2>&1; then
            echo "✅ MkDocs server started successfully"
            
            # Run linkchecker
            linkchecker --check-extern --ignore-url="^mailto:" --ignore-url="^tel:" http://127.0.0.1:8000 || echo "::warning::Some links may be broken"
          else
            echo "❌ Failed to start MkDocs server"
            exit 1
          fi
          
          # Clean up
          kill $SERVER_PID 2>/dev/null || true

      - name: Check documentation structure
        run: |
          echo "🔍 Validating documentation structure..."
          
          # Check if required files exist
          required_files=("docs/index.md" "mkdocs.yml" "README.md")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file missing: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done
          
          # Check if docs directory has content
          if [ -z "$(find docs -name '*.md' -type f)" ]; then
            echo "❌ No markdown files found in docs directory"
            exit 1
          fi
          
          echo "✅ Documentation structure is valid"

      - name: Generate documentation report
        if: always()
        run: |
          echo "📊 Generating documentation report..."
          
          # Count files
          total_md_files=$(find docs -name "*.md" -type f | wc -l)
          total_images=$(find docs -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.svg" | wc -l)
          
          # Calculate approximate word count
          word_count=$(find docs -name "*.md" -type f -exec cat {} \; | wc -w)
          
          echo "## 📈 Documentation Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Markdown files:** $total_md_files" >> $GITHUB_STEP_SUMMARY
          echo "- **Total images:** $total_images" >> $GITHUB_STEP_SUMMARY
          echo "- **Approximate word count:** $word_count" >> $GITHUB_STEP_SUMMARY
          echo "- **Last updated:** $(date)" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with validation results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## 📚 Documentation Validation Results\n\n';
            comment += '✅ MkDocs configuration is valid\n';
            comment += '✅ Documentation structure validated\n';
            comment += '✅ Internal links checked\n\n';
            comment += 'The documentation is ready for deployment! 🚀';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
